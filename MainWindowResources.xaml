<!--Resource Dictionary used by MainWindow-->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:vm="clr-namespace:QuickArch.ViewModel"
                    xmlns:vw="clr-namespace:QuickArch.View">
    
<!--This template applies a ComponentView to an instance of the 
    ComponentViewModel class shown in the main window.-->

    <DataTemplate DataType="{x:Type vm:SystemViewModel}" x:Key="ComponentTemplate">
        <vw:SystemBasicView />
    </DataTemplate>
    
    <DataTemplate DataType="{x:Type vm:TemporaryConnectorViewModel}" x:Key="TempConnectorTemplate">
        <vw:ConnectorControl />
    </DataTemplate>

    <!--This template shows how to render the list of commands on the left
    side in the main window (the 'Palette/Control Panel' area).-->
    <DataTemplate x:Key="CommandsTemplate">
        <MenuItem Command="{Binding Path=Command}" Header="{Binding Path=DisplayName}" Background="Transparent"
                  IsEnabled="{Binding Path=IsEnabled}" >
            <MenuItem.Icon>
                <Image Height="16" Width="16" Source="{Binding Path=Icon}" />
            </MenuItem.Icon>
        </MenuItem>
    </DataTemplate>
    
    <DataTemplate x:Key="ContextCommandsTemplate">
        <MenuItem Command="{Binding Path=Command}" 
                  Header="{Binding Path=DisplayName}"
                  Background="Transparent"
                  CommandParameter="{Binding Path=PlacementTarget.DataContext,
                                  RelativeSource={RelativeSource FindAncestor,
                                  AncestorType={x:Type ContextMenu}}}"
                  IsEnabled="{Binding Path=IsEnabled}">
            <MenuItem.Icon>
                <Image Height="16" Width="16" Source="{Binding Path=Icon}" />
            </MenuItem.Icon>
        </MenuItem>
    </DataTemplate>
    

    <!--This style configures how the MainWindow's treeview should be displayed -->
    <Style x:Key="MainTreeStyle" TargetType="{x:Type TreeView}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TreeView">
                    <Border Name="Border" CornerRadius="2" 
                            Background="White"
                            BorderBrush="LightGray"
                            BorderThickness="1" >
                        <ScrollViewer Focusable="False"
                                      CanContentScroll="False"
                                      Padding="4">
                            <ItemsPresenter/>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- 
  This style configures both of the main content areas in the main window.-->
    <Style x:Key="MainCCStyle" TargetType="{x:Type ContentControl}">
        <!--<Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Border 
            Background="{StaticResource Brush_HeaderBackground}"
            BorderBrush="LightGray" 
            BorderThickness="1" 
            CornerRadius="5" 
            Margin="4" 
            Padding="4" 
            SnapsToDevicePixels="True" 
            >
                    </Border>
                </DataTemplate>
            </Setter.Value>
        </Setter>-->
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <!-- 
        This template ensures that content of a HeaderedContentControl 
        fills the available vertical space. 
        -->
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <DockPanel>
                        <ContentPresenter 
              ContentSource="Content" 
              ContentTemplate="{TemplateBinding ContentTemplate}" 
              />
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
  This style ensures that the borders in the main window are consistent.
  -->
    <Style x:Key="MainBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="WhiteSmoke" />
        <Setter Property="BorderBrush" Value="#FFBCBCBC" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>

    <!--This template renders a tab item with a close button-->
    <DataTemplate x:Key="ClosableTabItemTemplate">
        <DockPanel Width="146">
            <Button Command="{Binding Path=CloseCommand}"
                Content="X"
                Cursor="Hand"
                DockPanel.Dock="Right"
                Focusable="False"
                FontFamily="Courier" 
                FontSize="9"
                FontWeight="Bold"  
                Margin="0,1,0,0"
                Padding="0"
                VerticalContentAlignment="Bottom"
                Width="16" Height="16" 
            />
            <ContentPresenter 
        Content="{Binding Path=DisplayName}" 
        VerticalAlignment="Center" 
        />
        </DockPanel>
    </DataTemplate>

    <!--
  This template explains how to render the 'Workspace' content area in the main window.
  -->
    <DataTemplate x:Key="WorkspacesTemplate">
        <TabControl 
      IsSynchronizedWithCurrentItem="True"
      ItemsSource="{Binding}" 
      ItemTemplate="{StaticResource ClosableTabItemTemplate}"
      Margin="4"
      SelectedItem="{Binding Path=IsSelected, Mode=TwoWay}"
      />
    </DataTemplate>
</ResourceDictionary>